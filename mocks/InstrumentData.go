// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	instruments "musiclab-be/features/instruments"

	mock "github.com/stretchr/testify/mock"
)

// InstrumentData is an autogenerated mock type for the InstrumentData type
type InstrumentData struct {
	mock.Mock
}

// Delete provides a mock function with given fields: mentorID, instrumentID
func (_m *InstrumentData) Delete(mentorID uint, instrumentID uint) error {
	ret := _m.Called(mentorID, instrumentID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(mentorID, instrumentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: input
func (_m *InstrumentData) Insert(input instruments.MentorInstrumentCore) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(instruments.MentorInstrumentCore) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectAll provides a mock function with given fields:
func (_m *InstrumentData) SelectAll() ([]instruments.Core, error) {
	ret := _m.Called()

	var r0 []instruments.Core
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]instruments.Core, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []instruments.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]instruments.Core)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAllByMentorID provides a mock function with given fields: mentorID
func (_m *InstrumentData) SelectAllByMentorID(mentorID uint) ([]instruments.MentorInstrumentCore, error) {
	ret := _m.Called(mentorID)

	var r0 []instruments.MentorInstrumentCore
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]instruments.MentorInstrumentCore, error)); ok {
		return rf(mentorID)
	}
	if rf, ok := ret.Get(0).(func(uint) []instruments.MentorInstrumentCore); ok {
		r0 = rf(mentorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]instruments.MentorInstrumentCore)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(mentorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewInstrumentData interface {
	mock.TestingT
	Cleanup(func())
}

// NewInstrumentData creates a new instance of InstrumentData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInstrumentData(t mockConstructorTestingTNewInstrumentData) *InstrumentData {
	mock := &InstrumentData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
