// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	transactions "musiclab-be/features/transactions"

	mock "github.com/stretchr/testify/mock"
)

// TransactionService is an autogenerated mock type for the TransactionService type
type TransactionService struct {
	mock.Mock
}

// GetMentorTransaction provides a mock function with given fields: mentorID, page, limit
func (_m *TransactionService) GetMentorTransaction(mentorID uint, page int, limit int) ([]transactions.Core, error) {
	ret := _m.Called(mentorID, page, limit)

	var r0 []transactions.Core
	if rf, ok := ret.Get(0).(func(uint, int, int) []transactions.Core); ok {
		r0 = rf(mentorID, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transactions.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, int, int) error); ok {
		r1 = rf(mentorID, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStudentTransaction provides a mock function with given fields: studentID, page, limit
func (_m *TransactionService) GetStudentTransaction(studentID uint, page int, limit int) ([]transactions.Core, error) {
	ret := _m.Called(studentID, page, limit)

	var r0 []transactions.Core
	if rf, ok := ret.Get(0).(func(uint, int, int) []transactions.Core); ok {
		r0 = rf(studentID, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transactions.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, int, int) error); ok {
		r1 = rf(studentID, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeTransaction provides a mock function with given fields: newTransaction
func (_m *TransactionService) MakeTransaction(newTransaction transactions.Core) (transactions.Core, error) {
	ret := _m.Called(newTransaction)

	var r0 transactions.Core
	if rf, ok := ret.Get(0).(func(transactions.Core) transactions.Core); ok {
		r0 = rf(newTransaction)
	} else {
		r0 = ret.Get(0).(transactions.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(transactions.Core) error); ok {
		r1 = rf(newTransaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTransaction provides a mock function with given fields: input
func (_m *TransactionService) UpdateTransaction(input transactions.Core) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(transactions.Core) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTransactionService interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionService creates a new instance of TransactionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionService(t mockConstructorTestingTNewTransactionService) *TransactionService {
	mock := &TransactionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
