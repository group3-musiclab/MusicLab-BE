// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	reviews "musiclab-be/features/reviews"

	mock "github.com/stretchr/testify/mock"
)

// ReviewData is an autogenerated mock type for the ReviewData type
type ReviewData struct {
	mock.Mock
}

// GetMentorReview provides a mock function with given fields: limit, offset, mentorID
func (_m *ReviewData) GetMentorReview(limit int, offset int, mentorID uint) ([]reviews.Core, error) {
	ret := _m.Called(limit, offset, mentorID)

	var r0 []reviews.Core
	if rf, ok := ret.Get(0).(func(int, int, uint) []reviews.Core); ok {
		r0 = rf(limit, offset, mentorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]reviews.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, uint) error); ok {
		r1 = rf(limit, offset, mentorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostMentorReview provides a mock function with given fields: mentorID, newReview
func (_m *ReviewData) PostMentorReview(mentorID uint, newReview reviews.Core) error {
	ret := _m.Called(mentorID, newReview)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, reviews.Core) error); ok {
		r0 = rf(mentorID, newReview)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewReviewData interface {
	mock.TestingT
	Cleanup(func())
}

// NewReviewData creates a new instance of ReviewData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReviewData(t mockConstructorTestingTNewReviewData) *ReviewData {
	mock := &ReviewData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
