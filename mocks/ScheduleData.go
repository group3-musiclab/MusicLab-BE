// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	schedules "musiclab-be/features/schedules"

	mock "github.com/stretchr/testify/mock"
)

// ScheduleData is an autogenerated mock type for the ScheduleData type
type ScheduleData struct {
	mock.Mock
}

// CheckSchedule provides a mock function with given fields: input
func (_m *ScheduleData) CheckSchedule(input schedules.Core) (int64, error) {
	ret := _m.Called(input)

	var r0 int64
	if rf, ok := ret.Get(0).(func(schedules.Core) int64); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(schedules.Core) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: mentorID, scheduleID
func (_m *ScheduleData) Delete(mentorID uint, scheduleID uint) error {
	ret := _m.Called(mentorID, scheduleID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(mentorID, scheduleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DetailSchedule provides a mock function with given fields: scheduleID
func (_m *ScheduleData) DetailSchedule(scheduleID uint) (schedules.Core, error) {
	ret := _m.Called(scheduleID)

	var r0 schedules.Core
	if rf, ok := ret.Get(0).(func(uint) schedules.Core); ok {
		r0 = rf(scheduleID)
	} else {
		r0 = ret.Get(0).(schedules.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(scheduleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMentorSchedule provides a mock function with given fields: mentorID
func (_m *ScheduleData) GetMentorSchedule(mentorID uint) ([]schedules.Core, error) {
	ret := _m.Called(mentorID)

	var r0 []schedules.Core
	if rf, ok := ret.Get(0).(func(uint) []schedules.Core); ok {
		r0 = rf(mentorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schedules.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(mentorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostSchedule provides a mock function with given fields: newClass
func (_m *ScheduleData) PostSchedule(newClass schedules.Core) error {
	ret := _m.Called(newClass)

	var r0 error
	if rf, ok := ret.Get(0).(func(schedules.Core) error); ok {
		r0 = rf(newClass)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewScheduleData interface {
	mock.TestingT
	Cleanup(func())
}

// NewScheduleData creates a new instance of ScheduleData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewScheduleData(t mockConstructorTestingTNewScheduleData) *ScheduleData {
	mock := &ScheduleData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
