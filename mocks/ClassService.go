// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	classes "musiclab-be/features/classes"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// ClassService is an autogenerated mock type for the ClassService type
type ClassService struct {
	mock.Mock
}

// Delete provides a mock function with given fields: mentorID, classID
func (_m *ClassService) Delete(mentorID uint, classID uint) error {
	ret := _m.Called(mentorID, classID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(mentorID, classID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMentorClass provides a mock function with given fields: mentorID, page, limit
func (_m *ClassService) GetMentorClass(mentorID uint, page int, limit int) ([]classes.Core, error) {
	ret := _m.Called(mentorID, page, limit)

	var r0 []classes.Core
	if rf, ok := ret.Get(0).(func(uint, int, int) []classes.Core); ok {
		r0 = rf(mentorID, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]classes.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, int, int) error); ok {
		r1 = rf(mentorID, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMentorClassDetail provides a mock function with given fields: classID
func (_m *ClassService) GetMentorClassDetail(classID uint) (classes.Core, error) {
	ret := _m.Called(classID)

	var r0 classes.Core
	if rf, ok := ret.Get(0).(func(uint) classes.Core); ok {
		r0 = rf(classID)
	} else {
		r0 = ret.Get(0).(classes.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(classID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostClass provides a mock function with given fields: fileData, newClass
func (_m *ClassService) PostClass(fileData multipart.FileHeader, newClass classes.Core) error {
	ret := _m.Called(fileData, newClass)

	var r0 error
	if rf, ok := ret.Get(0).(func(multipart.FileHeader, classes.Core) error); ok {
		r0 = rf(fileData, newClass)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: mentorID, classID, fileData, updatedClass
func (_m *ClassService) Update(mentorID uint, classID uint, fileData multipart.FileHeader, updatedClass classes.Core) error {
	ret := _m.Called(mentorID, classID, fileData, updatedClass)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint, multipart.FileHeader, classes.Core) error); ok {
		r0 = rf(mentorID, classID, fileData, updatedClass)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewClassService interface {
	mock.TestingT
	Cleanup(func())
}

// NewClassService creates a new instance of ClassService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClassService(t mockConstructorTestingTNewClassService) *ClassService {
	mock := &ClassService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
