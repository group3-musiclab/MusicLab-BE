// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	students "musiclab-be/features/students"

	mock "github.com/stretchr/testify/mock"
)

// StudentService is an autogenerated mock type for the StudentService type
type StudentService struct {
	mock.Mock
}

// Delete provides a mock function with given fields: studentID
func (_m *StudentService) Delete(studentID uint) error {
	ret := _m.Called(studentID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(studentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectProfile provides a mock function with given fields: studentID
func (_m *StudentService) SelectProfile(studentID uint) (students.Core, error) {
	ret := _m.Called(studentID)

	var r0 students.Core
	if rf, ok := ret.Get(0).(func(uint) students.Core); ok {
		r0 = rf(studentID)
	} else {
		r0 = ret.Get(0).(students.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(studentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateData provides a mock function with given fields: studentID, input
func (_m *StudentService) UpdateData(studentID uint, input students.Core) error {
	ret := _m.Called(studentID, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, students.Core) error); ok {
		r0 = rf(studentID, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePassword provides a mock function with given fields: studentID, input
func (_m *StudentService) UpdatePassword(studentID uint, input students.Core) error {
	ret := _m.Called(studentID, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, students.Core) error); ok {
		r0 = rf(studentID, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStudentService interface {
	mock.TestingT
	Cleanup(func())
}

// NewStudentService creates a new instance of StudentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStudentService(t mockConstructorTestingTNewStudentService) *StudentService {
	mock := &StudentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
